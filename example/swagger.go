// Code generated by go-bindata.
// sources:
// example/protos/service.proto
// example/protos/service.swagger.json
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _exampleProtosServiceProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x4e\xc3\x30\x10\x44\xef\xfb\x15\xa3\x9c\xda\x4b\x2c\x28\x5c\x88\x72\x44\x88\x2b\x7c\x40\xe5\xa6\x5b\xc7\xa2\xb1\x8d\xbd\xa9\x5a\x55\xf9\x77\xe4\x24\x15\x55\xe0\xe8\x99\x59\x3f\xcf\x3a\x5d\x9c\xe8\x33\x6a\x14\x21\x7a\xf1\x9b\xa2\x22\x1f\xc4\x7a\x07\xe3\xb7\x41\x37\x5f\xda\x70\x76\x8d\x95\xb6\xdf\x95\x8d\xef\x54\x12\x3e\x71\xd0\x51\xa2\xdd\x1b\x56\x89\xe3\xc9\x36\xac\xf8\xac\xbb\x70\x64\x35\xde\x93\x8a\x8a\xe8\x36\x3e\x3b\x15\x91\xed\x82\x8f\x82\xc2\x78\x6f\x8e\xac\x74\xb0\x4a\x3b\xe7\x45\x67\x62\x2a\xc7\xd1\x3c\xa9\x14\x16\xd1\xd1\xda\xf5\x07\xc5\x5d\x90\xcb\x6f\x92\x66\x3c\x5e\x27\x08\xae\x04\x28\x85\x37\x16\xdc\xac\x13\xc7\x94\x1b\x69\xb7\xc7\xae\xb7\xc7\x3d\xac\x3b\x78\x02\x62\x68\xf0\xee\x0e\x1e\xab\xcf\x29\x9a\x0f\x1f\xfc\xdd\x73\x92\x35\x22\x4b\x1f\x5d\x5a\x98\x29\x78\x97\x78\x3d\x72\x80\x79\x57\xab\xe9\x95\xa5\x0e\xb6\x6c\x45\xc2\x1a\xf5\x1c\x00\x0c\xcb\x0b\x0a\x95\x91\xc5\x28\x0d\x15\x01\x03\xd1\x40\xd4\x71\x4a\x79\x43\x7f\xf1\xb8\x0e\xff\xbb\x13\x1f\x57\x22\x20\x49\xb4\xce\xc0\xe9\x2e\xff\xd1\x43\x75\xa7\xdd\x3a\xd7\x78\xbc\x97\xa7\xfa\x35\x36\x4b\x51\xb6\x5a\x50\xe3\xe9\x5e\x37\x56\xb6\xad\x4e\x2d\x6a\x3c\x57\x44\xc3\x4f\x00\x00\x00\xff\xff\x87\x03\xf0\xb7\x2c\x02\x00\x00")

func exampleProtosServiceProtoBytes() ([]byte, error) {
	return bindataRead(
		_exampleProtosServiceProto,
		"example/protos/service.proto",
	)
}

func exampleProtosServiceProto() (*asset, error) {
	bytes, err := exampleProtosServiceProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example/protos/service.proto", size: 556, mode: os.FileMode(420), modTime: time.Unix(1551305906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exampleProtosServiceSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x3f\x6f\xdc\x30\x0c\xc5\x77\x7f\x0a\x82\xed\x18\xd8\x87\x8c\xb7\x75\x28\x8a\xac\xed\x58\x04\x81\x4e\xa6\x65\x05\xb6\x24\x88\xf4\xb5\x41\xe1\xef\x5e\x48\xb6\xe3\x3f\x09\x8a\xf4\x36\x59\x22\x7f\x7e\xef\x91\x7f\x0a\x00\xe4\x5f\xca\x18\x8a\x78\x06\xbc\x2f\x4f\x78\x97\xee\xac\x6b\x3c\x9e\x21\xbd\x03\xa0\x58\xe9\x28\xbd\x1b\x2b\xed\x70\x29\xb5\xef\x2b\x16\xba\x52\x50\x51\xa2\xad\x0d\x55\x4c\xf1\x6a\x35\x55\xf4\x5b\xf5\xa1\xa3\x2a\x44\x2f\x9e\x97\xeb\x32\x7f\x66\x34\x00\x5e\x29\xb2\xf5\x2e\x01\xe7\x23\x38\x2f\xc0\x24\x58\x00\x8c\x59\x00\xeb\x96\x7a\x62\x3c\xc3\xcf\xa9\xa9\x15\x09\x0b\x20\x9d\x39\xd5\x3e\xe6\x5a\xed\x1d\x0f\xbb\x62\x15\x42\x67\xb5\x12\xeb\x5d\xf5\xcc\xde\xad\xb5\x21\xfa\x7a\xd0\x1f\xac\x55\xd2\xf2\x9a\x42\xb5\x0b\x05\x00\x0d\xc9\xe6\x33\x89\x1e\xfa\x5e\xc5\x97\x64\xec\x1b\x25\x43\xd9\x3c\x2c\x26\x95\xab\xe1\x32\xd8\xae\x86\x4c\xba\x5b\x1b\x7d\xa0\x98\x15\x3c\xd4\xa9\xf9\xe1\xf0\x1c\x89\x83\x77\x4c\xbc\xfb\x1d\x00\xde\x9f\x4e\x87\x2b\x00\xac\x89\x75\xb4\x41\xe6\x88\xbf\x00\x0f\x5a\x13\x73\x33\x74\xb0\x90\xca\x0d\x7e\x92\x9e\xf2\x56\x6f\x60\x00\xf8\x39\x52\x93\x38\x9f\xaa\x9a\x1a\xeb\x6c\xe2\xf2\x32\xe7\x1f\x93\xc5\x24\xf8\xfb\x8c\xc6\x1d\x60\x2c\xde\x3b\x8f\x1b\x73\xa2\xcc\x3a\x8d\xf9\xee\xeb\x44\x5f\x51\x8f\xc5\x16\x31\xbe\xae\xc9\x46\xd2\x3a\xa8\x7f\x68\xdb\x4c\x4f\x5e\x42\xde\x69\x7f\x79\x26\x2d\xaf\x79\xa4\x0d\x09\x14\xc5\x1e\xd2\x46\xa7\x7a\x3a\xe6\xbf\x30\x58\xa2\x75\x06\xdf\xf5\xb7\x6e\xfb\x7f\xb7\xe6\x65\xb9\xb5\x51\x9e\x94\xdc\xd2\x6b\xac\x3c\xb5\x8a\xdb\x0f\xf7\xbe\x1d\x4d\x31\x16\x7f\x03\x00\x00\xff\xff\x9f\xf7\xb2\xe4\x5a\x04\x00\x00")

func exampleProtosServiceSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_exampleProtosServiceSwaggerJson,
		"example/protos/service.swagger.json",
	)
}

func exampleProtosServiceSwaggerJson() (*asset, error) {
	bytes, err := exampleProtosServiceSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "example/protos/service.swagger.json", size: 1114, mode: os.FileMode(420), modTime: time.Unix(1551311676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"example/protos/service.proto": exampleProtosServiceProto,
	"example/protos/service.swagger.json": exampleProtosServiceSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"example": &bintree{nil, map[string]*bintree{
		"protos": &bintree{nil, map[string]*bintree{
			"service.proto": &bintree{exampleProtosServiceProto, map[string]*bintree{}},
			"service.swagger.json": &bintree{exampleProtosServiceSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
